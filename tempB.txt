<template>
  <div>
    <pending-settings
      v-if="!onboarding"
      :has-unsaved-changes="hasUnsavedChanges()"
      :saving="saving"
      @save="saveChanges"
    />
    <loader-dots v-if="!current" />
    <template v-else>
      <div class="row">
        <div class="col-12">
          <card>
            <h3 slot="header">
              <i class="ti-layout-grid2"></i>
              &nbsp;{{ $t(titles[0]) }}
            </h3>
            <div>
              {{ $t(titles[1]) }}
            </div>
            <transition name="fade">
              <div
                class="banner-grid-selection"
                v-if="current.type != 'custom'"
              >
                <el-radio-group
                  v-model="current.type"
                  @change="saveIfOnboarding"
                >
                  <el-radio
                    v-for="(layout, idx) in allowedLayouts"
                    :key="idx"
                    :label="layout"
                    >{{ $t(layout) }}&nbsp;<i
                      v-if="!allowedLayouts.includes(layout)"
                      class="ti-lock"
                  /></el-radio>
                </el-radio-group>
                <dc-upgrade-message
                  v-if="!selectedBannerTypeAllowed()"
                  :message="$t(`upgrade your plan to use this layout`)"
                />
                <dc-message-banner
                  v-else
                  icon="ti-light-bulb"
                  :message="bannerRecommendation"
                />
              </div>
              <dc-message-banner v-else type="error"
                >{{ $t("custom layout selected") }}
              </dc-message-banner>
            </transition>
            <transition name="fade">
              <div class="row" v-if="current.type === 'low'">
                <div class="col-md-6 col-sm-12 img-col">
                  <img src="@/assets/img/banner-layout/low-desktop.jpg" />
                </div>
                <div class="col-md-6 col-sm-12">
                  <el-collapse>
                    <el-collapse-item>
                      <template #title>
                        <dl>
                          <dt class="static"></dt>
                          <dd>{{ $t("1 static banner") }}</dd>
                        </dl>
                      </template>
                      <banner-description type="static" />
                    </el-collapse-item>
                    <el-collapse-item>
                      <template #title>
                        <dl>
                          <dt class="dynamic"></dt>
                          <dd>
                            {{ $t("dynamic banner count", { count: 2 }) }}
                          </dd>
                        </dl>
                      </template>
                      <banner-description type="low" />
                    </el-collapse-item>
                  </el-collapse>
                </div>
              </div>
              <div class="row" v-else-if="current.type === 'medium'">
                <div class="col-md-6 col-sm-12 img-col">
                  <img src="@/assets/img/banner-layout/medium-desktop.jpg" />
                </div>
                <div class="col-md-6 col-sm-12">
                  <el-collapse>
                    <el-collapse-item>
                      <template #title>
                        <dl>
                          <dt class="static"></dt>
                          <dd>{{ $t("1 static banner") }}</dd>
                        </dl>
                      </template>
                      <banner-description type="static" />
                    </el-collapse-item>
                    <el-collapse-item>
                      <template #title>
                        <dl>
                          <dt class="dynamic"></dt>
                          <dd>
                            {{ $t("dynamic banner count", { count: 3 }) }}
                          </dd>
                        </dl>
                      </template>
                      <banner-description type="medium" />
                    </el-collapse-item>
                  </el-collapse>
                </div>
              </div>
              <div class="row" v-else-if="current.type === 'high'">
                <div class="col-md-6 col-sm-12 img-col">
                  <img src="@/assets/img/banner-layout/high-desktop.jpg" />
                </div>
                <div class="col-md-6 col-sm-12">
                  <el-collapse>
                    <el-collapse-item>
                      <template #title>
                        <dl>
                          <dt class="static"></dt>
                          <dd>{{ $t("1 static banner") }}</dd>
                        </dl>
                      </template>
                      <banner-description type="static" />
                    </el-collapse-item>
                    <el-collapse-item>
                      <template #title>
                        <dl>
                          <dt class="dynamic"></dt>
                          <dd>
                            {{ $t("dynamic banner count", { count: 4 }) }}
                          </dd>
                        </dl>
                      </template>
                      <banner-description type="high" />
                    </el-collapse-item>
                  </el-collapse>
                </div>
              </div>
            </transition>
          </card>
        </div>
      </div>
      <div class="row" v-if="!onboarding">
        <div class="col-12">
          <card>
            <h3 slot="header">
              <i class="ti-image"></i>
              &nbsp;{{ $t("static banner") }}
            </h3>
            <div class="row">
              <div class="col-sm-6 col-xs-12">
                <template v-if="!staticBannerLoading">
                  <img
                    v-if="installationSettings.static_banner.photo_url"
                    :src="installationSettings.static_banner.photo_url"
                    style="max-width: 100%"
                  />
                  <p v-else>{{ $t("no static banner") }}</p>
                </template>
                <loader-dots v-else></loader-dots>
              </div>
              <div class="col-sm-6 col-xs-12">
                <div
                  v-html="
                    $t(
                      `static banner description:${
                        installationSettings.static_banner.photo_url
                          ? 'found'
                          : 'notfound'
                      }`
                    )
                  "
                />
                <dc-button
                  class="btn-add-static-banner"
                  tag="a"
                  :href="staticBannerLink"
                  type="outline"
                  >{{
                    $t(
                      installationSettings.static_banner.photo_url
                        ? "change static banner"
                        : "add static banner"
                    )
                  }}
                </dc-button>
              </div>
            </div>
          </card>
        </div>
      </div>
      <div class="row" v-if="!onboarding">
        <div class="col-12">
          <card>
            <h3 slot="header">
              <i class="ti-pencil"></i>
              &nbsp;{{ $t("custom banner layout") }}
            </h3>
            <div>{{ $t("custom banner description") }}</div>
            <dc-upgrade-message
              v-if="!bannerAccess.custom_layout"
              :message="
                $t('upgrade your plan to design your own banner layout')
              "
            />
            <div class="view-docs-btn">
              <dc-button tag="a" :href="recommendationLink" type="outline"
                >{{ $t("view docs") }}
              </dc-button>
            </div>
            <el-switch
              v-model="vCustom"
              active-color="#fab800"
              inactive-color="#80848e"
              :disabled="!bannerAccess.custom_layout"
              :active-text="$t('on')"
              :inactive-text="$t('off')"
            >
            </el-switch>
            <el-form
              label-position="top"
              label-width="180px"
              v-if="current.type === 'custom'"
            >
              <el-form-item :label="$t('large banners')">
                <el-slider
                  v-model="current.main_banners"
                  :step="1"
                  :max="20"
                  :min="0"
                  show-input
                ></el-slider>
              </el-form-item>
              <el-form-item :label="$t('small banners')">
                <el-slider
                  v-model="current.sub_banners"
                  :step="1"
                  :max="20"
                  :min="0"
                  show-input
                ></el-slider>
              </el-form-item>
            </el-form>
          </card>
        </div>
      </div>
    </template>
  </div>
</template>
<script setup>
import { mapGetters, mapActions } from "vuex";
import { useStore } from "vuex";
import { computed, ref, onMounted } from "vue";
import Card from "@/components/Cards/Card.vue";
import PendingSettings from "@/components/Settings/PendingSettings.vue";
import BannerDescription from "@/components/Settings/BannerDescription.vue";
import DcButton from "@/components/DcButton.vue";
import DcMessageBanner from "@/components/DcMessageBanner.vue";
import DcUpgradeMessage from "@/components/DcUpgradeMessage.vue";
import cloneDeep from "lodash/cloneDeep";
import isEqual from "lodash/isEqual";
import LoaderDots from "@/components/LoaderDots.vue";
import * as Sentry from "@sentry/browser";

const store = useStore();
// export default {
// name: "BannerSettings",
// components: {
//   Card,
//   LoaderDots,
//   PendingSettings,
//   BannerDescription,
//   DcButton,
//   DcMessageBanner,
//   DcUpgradeMessage
// },
// data() {
// return {
const saving = ref(false);
const staticBannerLoading = ref(false);
const defaults = ref({
  type: "low",
  main_banners: 1,
  sub_banners: 2
});
const current = ref(null);
const lastSaved = ref(null);
// };
// }

const props = defineProps({
  onboarding: {
    type: Boolean,
    default: false
  }
});
// props: {
//   onboarding: {
//     type: Boolean,
//     default: false
//   }
// }

const { client, subscription, languageCode } = store.getters;
const webSettings = store.getters["settings/webSettings"];
const installationSettings = store.getters["settings/installationSettings"];

// ...mapGetters(["client", "subscription", "languageCode"]),
// ...mapGetters("settings", ["webSettings", "installationSettings"]),

const allowedLayouts = computed(() => {
  if (props.onboarding || !bannerAccess.value.allowed_layouts) {
    return ["low"];
  }
  return bannerAccess.value.allowed_layouts || ["low"];
});

const bannerAccess = computed(() => {
  let bannerAccess = subscription?.access?.personalization?.banners || {
    banner_limit: 0,
    custom_layout: false,
    allowed_layouts: ["low"]
  };
  if (!bannerAccess.allowed_layouts) {
    bannerAccess.allowed_layouts = ["low"];
  }
  return bannerAccess;
});
const bannerRecommendation = computed(() => {
  if (!current.value || current.value === "custom") {
    return "";
  }
  return `${current.value.type} rec`;
});
const titles = computed(() => {
  if (props.onboarding) {
    return [
      "we picked a banner layout for you",
      "just create 3 banners to start, one wide banner (1200 x 720 px) and two narrow (480 x 720 px)"
    ];
  }
  return ["select banner layout", "how many dynamic banners do you want?"];
});
const recommendationLink = computed(() => {
  let lang = "";
  if (languageCode === "es") {
    lang = "es/";
  }
  return `https://help.datacue.co/${lang}${client.type}/install/advanced.html#custom-banner-layout`;
});
const staticBannerLink = computed(() => {
  let lang = "";
  if (languageCode === "es") {
    lang = "es/";
  }
  return `https://help.datacue.co/${lang}install/${client.type}.html#changing-your-static-banner-later`;
});
const vCustom = {
  get() {
    return current.value.type === "custom";
  },
  set(v) {
    if (v) {
      current.value["type"] = "custom";
      return;
    }
    const layoutType =
      lastSaved.value.type !== "custom" ? lastSaved.value.type : "medium";
    current.value["type"] = layoutType;
  }
};
const banners = () => {
  let banners;
  try {
    banners = webSettings.recommendations.banners;
  } catch {
    banners = null;
  }
  if (!banners) {
    return null;
  }

  if (!banners.type) {
    banners.type = guessBannerType(banners.main_banners);
  }
  return banners;
};
const selectedBannerTypeAllowed = () => {
  if (!bannerAccess.value || !current.value) {
    return false;
  }
  return (
    (bannerAccess.value.custom_layout && current.value.type === "custom") ||
    allowedLayouts.value.includes(current.value.type)
  );
};
const hasUnsavedChanges = () => {
  return (
    selectedBannerTypeAllowed() && !isEqual(current.value, lastSaved.value)
  );
};
// }
// methods: {
// ...mapActions("settings", [
//   "getWebSettings",
//   "saveSettings",
//   "getPageInstallationSettings"
// ]),
const refreshStaticBannerInfo = async () => {
  staticBannerLoading.value = true;
  try {
    // await this.getPageInstallationSettings("home");
    await store.dispatch("settings/getPageInstallationSettings", "home");
  } catch (err) {
    Sentry.captureException(err);
  } finally {
    staticBannerLoading.value = false;
  }
};
const submitForm = () => {
  saveChanges();
};
const saveIfOnboarding = () => {
  if (props.onboarding) {
    saveChanges();
  }
};
const getMainBannerCountFromType = (type) => {
  switch (type) {
    case "low":
      return 1;
    case "medium":
      return 2;
    case "high":
      return 3;
    default:
      return 1;
  }
};
const saveChanges = async () => {
  if (!selectedBannerTypeAllowed()) {
    return;
  }
  saving.value = true;
  try {
    const newSettings = cloneDeep(webSettings);
    if (current.value.type !== "custom") {
      current.value.sub_banners = 2;
      current.value.main_banners = getMainBannerCountFromType(
        current.value.type
      );
    }
    newSettings.recommendations.banners = cloneDeep(current.value);
    await store.dispatch("settings/saveSettings", {
      web_settings: newSettings
    });
    // await this.saveSettings({ web_settings: newSettings });
    lastSaved.value = cloneDeep(banners() || {});
  } catch (err) {
    Sentry.captureException(err);
  } finally {
    saving.value = false;
  }
};
const guessBannerType = (main_banners) => {
  if (!main_banners) {
    return "";
  }
  switch (main_banners) {
    case (0, 1):
      return "low";
    case 2:
      return "medium";
    case 3:
      return "high";
    default:
      return "low";
  }
};
const refreshData = async () => {
  try {
    const webSettings = store.dispatch("settings/getWebSettings");
    // const webSettings = this.getWebSettings();
    const installationSettings = store.dispatch(
      "settings/getPageInstallationSettings",
      "home"
    );
    [await webSettings, await installationSettings];
    lastSaved.value = cloneDeep(banners() || {});
  } catch (err) {
    Sentry.captureException(err);
  } finally {
    current.value = cloneDeep(banners() || defaults.value);
  }
};
// },
// mounted() {
//   this.refreshData();
// }
// };
onMounted(() => {
  refreshData();
});
</script>
<style lang="scss" scoped>
@import "@/assets/sass/datacue/_colors.scss";

.img-col > img {
  width: 100%;
}

dl {
  background: none;
  display: flex;
  align-items: center;
  height: 48px;
  line-height: 48px;
  font-size: 13px;
  margin: 0px;
  padding: 0px;
}

dd {
  margin: 0px;
}

dt {
  width: 12px;
  height: 12px;
  margin-right: 0.5em;
}

dt.dynamic {
  background-color: $primary;
}

dt.static {
  background-color: $gray;
}

.banner-grid-selection {
  padding: 20px 0px;
}

.view-docs-btn {
  margin-top: 2em;
  margin-bottom: 2em;
}

span.btn-add-static-banner {
  display: block;
  margin-bottom: 0.5rem;
}
</style>

<style>
.el-collapse-item__header.is-active {
  justify-content: space-between;
}
</style>